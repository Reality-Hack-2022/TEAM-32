//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""VR"",
            ""id"": ""acf05c09-b326-45bb-a8e7-3d151cbc0742"",
            ""actions"": [
                {
                    ""name"": ""Left_Grip"",
                    ""type"": ""Button"",
                    ""id"": ""8cba5a81-bc86-41f8-afdc-8f5e19317184"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right_Grip"",
                    ""type"": ""Button"",
                    ""id"": ""6628da19-e368-4b01-9fa2-b46e70ca1d49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left_Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""60fa3e2c-3a6d-437e-a228-9fa95026b4e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right_Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""e5b10904-f14b-4ff5-8306-79c872e07ecb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right_Primary"",
                    ""type"": ""Button"",
                    ""id"": ""ddf198d1-cf73-491d-9298-05f42ef54b23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left_Primary"",
                    ""type"": ""Button"",
                    ""id"": ""42a6b75e-e484-4eb6-af39-c2604f0b321c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc2351a9-4591-4d3d-81e3-0aba96baefb5"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left_Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de96a1b8-2866-4b28-8620-79834dcacff0"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right_Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32889b40-af25-416b-b872-0cda6f74eecb"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left_Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7de3d797-49a1-4f7c-be5c-d11eadbb0024"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right_Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b85699e2-e268-41ef-bac9-48022e917c9d"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right_Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a57303c5-2c69-4f9a-95dc-3643975887d5"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left_Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VR
        m_VR = asset.FindActionMap("VR", throwIfNotFound: true);
        m_VR_Left_Grip = m_VR.FindAction("Left_Grip", throwIfNotFound: true);
        m_VR_Right_Grip = m_VR.FindAction("Right_Grip", throwIfNotFound: true);
        m_VR_Left_Trigger = m_VR.FindAction("Left_Trigger", throwIfNotFound: true);
        m_VR_Right_Trigger = m_VR.FindAction("Right_Trigger", throwIfNotFound: true);
        m_VR_Right_Primary = m_VR.FindAction("Right_Primary", throwIfNotFound: true);
        m_VR_Left_Primary = m_VR.FindAction("Left_Primary", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VR
    private readonly InputActionMap m_VR;
    private IVRActions m_VRActionsCallbackInterface;
    private readonly InputAction m_VR_Left_Grip;
    private readonly InputAction m_VR_Right_Grip;
    private readonly InputAction m_VR_Left_Trigger;
    private readonly InputAction m_VR_Right_Trigger;
    private readonly InputAction m_VR_Right_Primary;
    private readonly InputAction m_VR_Left_Primary;
    public struct VRActions
    {
        private @Controls m_Wrapper;
        public VRActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left_Grip => m_Wrapper.m_VR_Left_Grip;
        public InputAction @Right_Grip => m_Wrapper.m_VR_Right_Grip;
        public InputAction @Left_Trigger => m_Wrapper.m_VR_Left_Trigger;
        public InputAction @Right_Trigger => m_Wrapper.m_VR_Right_Trigger;
        public InputAction @Right_Primary => m_Wrapper.m_VR_Right_Primary;
        public InputAction @Left_Primary => m_Wrapper.m_VR_Left_Primary;
        public InputActionMap Get() { return m_Wrapper.m_VR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRActions set) { return set.Get(); }
        public void SetCallbacks(IVRActions instance)
        {
            if (m_Wrapper.m_VRActionsCallbackInterface != null)
            {
                @Left_Grip.started -= m_Wrapper.m_VRActionsCallbackInterface.OnLeft_Grip;
                @Left_Grip.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnLeft_Grip;
                @Left_Grip.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnLeft_Grip;
                @Right_Grip.started -= m_Wrapper.m_VRActionsCallbackInterface.OnRight_Grip;
                @Right_Grip.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnRight_Grip;
                @Right_Grip.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnRight_Grip;
                @Left_Trigger.started -= m_Wrapper.m_VRActionsCallbackInterface.OnLeft_Trigger;
                @Left_Trigger.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnLeft_Trigger;
                @Left_Trigger.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnLeft_Trigger;
                @Right_Trigger.started -= m_Wrapper.m_VRActionsCallbackInterface.OnRight_Trigger;
                @Right_Trigger.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnRight_Trigger;
                @Right_Trigger.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnRight_Trigger;
                @Right_Primary.started -= m_Wrapper.m_VRActionsCallbackInterface.OnRight_Primary;
                @Right_Primary.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnRight_Primary;
                @Right_Primary.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnRight_Primary;
                @Left_Primary.started -= m_Wrapper.m_VRActionsCallbackInterface.OnLeft_Primary;
                @Left_Primary.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnLeft_Primary;
                @Left_Primary.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnLeft_Primary;
            }
            m_Wrapper.m_VRActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Left_Grip.started += instance.OnLeft_Grip;
                @Left_Grip.performed += instance.OnLeft_Grip;
                @Left_Grip.canceled += instance.OnLeft_Grip;
                @Right_Grip.started += instance.OnRight_Grip;
                @Right_Grip.performed += instance.OnRight_Grip;
                @Right_Grip.canceled += instance.OnRight_Grip;
                @Left_Trigger.started += instance.OnLeft_Trigger;
                @Left_Trigger.performed += instance.OnLeft_Trigger;
                @Left_Trigger.canceled += instance.OnLeft_Trigger;
                @Right_Trigger.started += instance.OnRight_Trigger;
                @Right_Trigger.performed += instance.OnRight_Trigger;
                @Right_Trigger.canceled += instance.OnRight_Trigger;
                @Right_Primary.started += instance.OnRight_Primary;
                @Right_Primary.performed += instance.OnRight_Primary;
                @Right_Primary.canceled += instance.OnRight_Primary;
                @Left_Primary.started += instance.OnLeft_Primary;
                @Left_Primary.performed += instance.OnLeft_Primary;
                @Left_Primary.canceled += instance.OnLeft_Primary;
            }
        }
    }
    public VRActions @VR => new VRActions(this);
    public interface IVRActions
    {
        void OnLeft_Grip(InputAction.CallbackContext context);
        void OnRight_Grip(InputAction.CallbackContext context);
        void OnLeft_Trigger(InputAction.CallbackContext context);
        void OnRight_Trigger(InputAction.CallbackContext context);
        void OnRight_Primary(InputAction.CallbackContext context);
        void OnLeft_Primary(InputAction.CallbackContext context);
    }
}
